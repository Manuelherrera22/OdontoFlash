// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String
  address   String
  birthDate DateTime
  userType  UserType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  patientProfile PatientProfile?
  studentProfile StudentProfile?
  appointments  Appointment[]
  reviews       Review[]
  receivedReviews Review[] @relation("ReviewReceiver")

  @@map("users")
}

model PatientProfile {
  id            String  @id @default(cuid())
  userId        String  @unique
  dentalNeeds   String
  medicalHistory String?
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("patient_profiles")
}

model StudentProfile {
  id            String  @id @default(cuid())
  userId        String  @unique
  university    String
  studentId     String
  semester      Int
  specialization String
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model Appointment {
  id          String            @id @default(cuid())
  studentId   String
  patientId   String
  title       String
  description String?
  date        DateTime
  duration    Int // in minutes
  status      AppointmentStatus @default(SCHEDULED)
  price       Float?
  discount    Float? // percentage
  isFree      Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  student User @relation(fields: [studentId], references: [id], onDelete: Cascade)
  patient User @relation(fields: [patientId], references: [id], onDelete: Cascade)

  @@map("appointments")
}

model Review {
  id          String @id @default(cuid())
  reviewerId  String
  receiverId  String
  appointmentId String?
  rating      Int // 1-5
  comment     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reviewer User @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  receiver User @relation("ReviewReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

enum UserType {
  PATIENT
  STUDENT
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}
